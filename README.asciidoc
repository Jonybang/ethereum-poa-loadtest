# Ethereum POA (AuRa) Chain Loadtest

## Installation

To deploy ansible scripts for DigitalOcean `dopy` ansible plugin should be used. The latest version of an initial contributor doesn't support python 3.6, so the `//github.com/dfundingsland/dopy.git` fork was used. To install it use the following command:

[source,shell]
.Install dopy with python v3.x support
----
pip install git+git://github.com/dfundingsland/dopy.git#egg=dopy
----

## Workflow

### Step 1. Generate chain configs and validator keys
* Modify `count` constant in app.js file to match the number of required validators in the network.
* generate private keys for all accounts (using `node.js`)

[source,sh]
----
node app.js
----

* The script will generate a timestamped folder located inside `/tmp`.

### Step 2. Launch DigitalOcean droplets.
* Fill required values in `group_vars/all` and `group_vars/validator` config files.
** do_region - Digital Ocean region
** do_image_id - Digital Ocean image ID
** validators_count - how many validators you want to bootstrap
** username - validator ubuntu user name
** home - home folder for validator user
** timestamp - name of the folder generated by `node app.js` command
** processor_count - how many processor cores your droplets have
** genesis_network_name - the same name as in chain specification file `spec.json`
* Export your DigitalOcean API token and run the droplets launcher playbook

[source,sh]
----
export DO_API_TOKEN=my_do_token
ansible-playbook createDoNodes.yml
----

This playbook will create the required amount of droplets and generate a new `hosts.txt` to be used
in the next step.

### Step 3. Droplets provision.

[source,sh]
----
ansible-playbook -i hosts.txt validator.yml
----

This playbook will install parity and it's configuration files and connect them all together
through updating bootnodes.txt.

## Useful commands

[source,shell]
.Request DO for available OS images
----
curl -X GET "https://api.digitalocean.com/v2/images" -H "Authorization: Bearer $TOKEN" | python -m json.tool
----

